<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Remitente;
use App\Models\Departamento;
use App\Models\Ciudad;
use Faker\Factory as Faker;

class RemitentesAleatoriosSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $this->command->info('üöÄ Iniciando creaci√≥n de remitentes aleatorios...');

        // Verificar que existan departamentos y ciudades
        $departamentos = Departamento::activo()->with('ciudades')->get();
        
        if ($departamentos->isEmpty()) {
            $this->command->error('‚ùå No hay departamentos disponibles. Ejecuta DepartamentoCiudadSeeder primero.');
            return;
        }

        $this->command->info("üìä Departamentos disponibles: {$departamentos->count()}");
        $totalCiudades = $departamentos->sum(function($depto) {
            return $depto->ciudades->count();
        });
        $this->command->info("üìä Ciudades disponibles: {$totalCiudades}");

        // Configurar Faker en espa√±ol
        $faker = Faker::create('es_ES');

        // Definir todas las posibles combinaciones
        $tiposDocumento = ['CC', 'CE', 'TI', 'PP', 'NIT', 'OTRO'];
        
        // Nombres realistas colombianos
        $nombres = [
            'Juan Carlos', 'Mar√≠a Elena', 'Carlos Alberto', 'Ana Sof√≠a', 'Luis Fernando', 'Carmen Rosa',
            'Jos√© Miguel', 'Claudia Patricia', 'Roberto Antonio', 'Luz Marina', 'Diego Alejandro', 'Sandra Milena',
            'Andr√©s Felipe', 'Paola Andrea', 'Ricardo Enrique', 'Gloria Esperanza', 'Fernando Jos√©', 'M√≥nica Alejandra',
            'Gustavo Adolfo', 'Liliana Patricia', 'H√©ctor Fabi√°n', 'Yolanda Mar√≠a', '√ìscar Iv√°n', 'Beatriz Elena',
            'Jairo Alberto', 'Esperanza del Carmen', '√Ålvaro Hern√°n', 'Rosa Mar√≠a', '√âdgar Mauricio', 'Amparo',
            'Germ√°n Dar√≠o', 'Stella Maris', 'Rub√©n Dar√≠o', 'Marta Luc√≠a', 'Javier Orlando', 'Nubia Esperanza',
            'Hernando', 'Blanca Cecilia', 'Arturo', 'Gladys', 'Emilio', 'Consuelo', 'Ramiro', 'Olga Luc√≠a'
        ];

        $apellidos = [
            'Garc√≠a', 'Rodr√≠guez', 'Gonz√°lez', 'Hern√°ndez', 'L√≥pez', 'Mart√≠nez', 'P√©rez', 'S√°nchez',
            'Ram√≠rez', 'Torres', 'Flores', 'Rivera', 'G√≥mez', 'D√≠az', 'Cruz', 'Morales',
            'Ortiz', 'Guti√©rrez', 'Ch√°vez', 'Ruiz', 'Jim√©nez', 'Vargas', 'Castillo', 'Herrera',
            'Mendoza', 'Medina', 'Aguilar', 'Guerrero', 'Rojas', 'Mu√±oz', 'Delgado', 'Castro',
            'Ortega', 'Rubio', 'Mar√≠n', 'Soto', 'Contreras', 'Silva', 'Sep√∫lveda', 'Esquivel'
        ];

        // Entidades/organizaciones t√≠picas
        $entidades = [
            'Alcald√≠a Municipal', 'Gobernaci√≥n Departamental', 'Ministerio de Salud', 'ICBF',
            'Polic√≠a Nacional', 'Bomberos Voluntarios', 'Cruz Roja Colombiana', 'Defensor√≠a del Pueblo',
            'Procuradur√≠a General', 'Contralor√≠a General', 'Universidad Nacional', 'SENA',
            'EPS Sanitas', 'EPS Sura', 'EPS Compensar', 'EPS Famisanar', 'Nueva EPS', 'Medim√°s',
            'C√°mara de Comercio', 'DIAN', 'Registradur√≠a Nacional', 'Migraci√≥n Colombia',
            'Ministerio de Educaci√≥n', 'Secretar√≠a de Educaci√≥n', 'Secretar√≠a de Salud', 'INVIMA',
            'DANE', 'IDEAM', 'ANLA', 'Superintendencia de Salud', 'Ministerio del Trabajo',
            'Colpensiones', 'ISS', 'Positiva ARL', 'Sura ARL', 'Colmena ARL',
            null, null, null, null, null // Para que algunos no tengan entidad
        ];

        // Dominios de email comunes en Colombia
        $dominiosEmail = [
            'gmail.com', 'hotmail.com', 'yahoo.com', 'outlook.com', 'yahoo.es',
            'une.net.co', 'etb.net.co', 'telecom.com.co', 'cable.net.co'
        ];

        // Prefijos telef√≥nicos de Colombia
        $prefijosCelular = ['300', '301', '302', '303', '304', '305', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '350', '351'];

        // Cantidad de remitentes a crear
        $cantidadRemitentes = 100;
        $this->command->info("üéØ Creando {$cantidadRemitentes} remitentes aleatorios...");

        $barra = $this->command->getOutput()->createProgressBar($cantidadRemitentes);
        $barra->start();

        for ($i = 1; $i <= $cantidadRemitentes; $i++) {
            // Seleccionar departamento y ciudad aleatoriamente
            $departamento = $departamentos->random();
            $ciudad = $departamento->ciudades->random();

            // Generar datos aleatorios
            $tipoDocumento = $faker->randomElement($tiposDocumento);
            $numeroDocumento = $this->generarNumeroDocumento($tipoDocumento, $faker);
            
            $nombre = $faker->randomElement($nombres);
            $apellido1 = $faker->randomElement($apellidos);
            $apellido2 = $faker->randomElement($apellidos);
            $nombreCompleto = "{$nombre} {$apellido1} {$apellido2}";

            // Email (70% probabilidad de tener email)
            $email = null;
            if ($faker->boolean(70)) {
                $nombreEmail = strtolower(str_replace(' ', '.', $nombre . '.' . $apellido1));
                $nombreEmail = $this->limpiarTextoParaEmail($nombreEmail);
                $dominio = $faker->randomElement($dominiosEmail);
                $email = "{$nombreEmail}@{$dominio}";
            }

            // Tel√©fono (80% probabilidad de tener tel√©fono)
            $telefono = null;
            if ($faker->boolean(80)) {
                $prefijo = $faker->randomElement($prefijosCelular);
                $numero = $faker->numberBetween(1000000, 9999999);
                $telefono = "{$prefijo}{$numero}";
            }

            // Direcci√≥n (60% probabilidad de tener direcci√≥n)
            $direccion = null;
            if ($faker->boolean(60)) {
                $tipoVia = $faker->randomElement(['Calle', 'Carrera', 'Avenida', 'Diagonal', 'Transversal']);
                $numero1 = $faker->numberBetween(1, 200);
                $numero2 = $faker->numberBetween(1, 99);
                $numero3 = $faker->numberBetween(1, 99);
                $direccion = "{$tipoVia} {$numero1} #{$numero2}-{$numero3}";
                
                // Agregar complemento ocasionalmente
                if ($faker->boolean(30)) {
                    $complementos = ['Apto 101', 'Casa 2', 'Local 3', 'Oficina 205', 'Torre A', 'Bloque B'];
                    $direccion .= ' ' . $faker->randomElement($complementos);
                }
            }

            // Entidad (40% probabilidad de tener entidad)
            $entidad = null;
            if ($faker->boolean(40)) {
                $entidad = $faker->randomElement($entidades);
            }

            // Crear remitente
            Remitente::create([
                'tipo' => 'registrado', // Todos son registrados seg√∫n los requerimientos
                'tipo_documento' => $tipoDocumento,
                'numero_documento' => $numeroDocumento,
                'nombre_completo' => $nombreCompleto,
                'telefono' => $telefono,
                'email' => $email,
                'direccion' => $direccion,
                'ciudad' => $ciudad->nombre,
                'departamento' => $departamento->nombre,
                'entidad' => $entidad,
                'observaciones' => $faker->boolean(10) ? $faker->sentence() : null,
            ]);

            $barra->advance();
        }

        $barra->finish();
        $this->command->newLine();
        $this->command->info('‚úÖ Remitentes aleatorios creados exitosamente!');
        
        // Mostrar estad√≠sticas
        $this->mostrarEstadisticas();
    }

    /**
     * Generar n√∫mero de documento seg√∫n el tipo
     */
    private function generarNumeroDocumento($tipoDocumento, $faker)
    {
        switch ($tipoDocumento) {
            case 'CC':
                return $faker->numberBetween(10000000, 99999999); // 8-9 d√≠gitos
            case 'CE':
                return $faker->numberBetween(100000, 9999999); // 6-7 d√≠gitos
            case 'TI':
                return $faker->numberBetween(1000000000, 9999999999); // 10 d√≠gitos
            case 'PP':
                return strtoupper($faker->bothify('??######')); // 2 letras + 6 n√∫meros
            case 'NIT':
                return $faker->numberBetween(100000000, 999999999) . '-' . $faker->numberBetween(0, 9); // NIT con d√≠gito verificador
            case 'OTRO':
                return $faker->bothify('###-###-###'); // Formato gen√©rico
            default:
                return $faker->numberBetween(10000000, 99999999);
        }
    }

    /**
     * Limpiar texto para usar en email
     */
    private function limpiarTextoParaEmail($texto)
    {
        // Reemplazar caracteres especiales
        $texto = str_replace(['√°', '√©', '√≠', '√≥', '√∫', '√±'], ['a', 'e', 'i', 'o', 'u', 'n'], $texto);
        // Remover caracteres no v√°lidos para email
        $texto = preg_replace('/[^a-z0-9.]/', '', $texto);
        return $texto;
    }

    /**
     * Mostrar estad√≠sticas de los remitentes creados
     */
    private function mostrarEstadisticas()
    {
        $total = Remitente::count();
        $conEmail = Remitente::whereNotNull('email')->count();
        $conTelefono = Remitente::whereNotNull('telefono')->count();
        $conDireccion = Remitente::whereNotNull('direccion')->count();
        $conEntidad = Remitente::whereNotNull('entidad')->count();

        $this->command->info("\nüìà Estad√≠sticas de remitentes:");
        $this->command->info("   - Total remitentes: {$total}");
        $this->command->info("   - Con email: {$conEmail} (" . round(($conEmail/$total)*100, 1) . "%)");
        $this->command->info("   - Con tel√©fono: {$conTelefono} (" . round(($conTelefono/$total)*100, 1) . "%)");
        $this->command->info("   - Con direcci√≥n: {$conDireccion} (" . round(($conDireccion/$total)*100, 1) . "%)");
        $this->command->info("   - Con entidad: {$conEntidad} (" . round(($conEntidad/$total)*100, 1) . "%)");

        // Estad√≠sticas por tipo de documento
        $this->command->info("\nüìã Por tipo de documento:");
        foreach (['CC', 'CE', 'TI', 'PP', 'NIT', 'OTRO'] as $tipo) {
            $cantidad = Remitente::where('tipo_documento', $tipo)->count();
            $this->command->info("   - {$tipo}: {$cantidad}");
        }
    }
}
